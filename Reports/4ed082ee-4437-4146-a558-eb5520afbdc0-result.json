{"name": "test_mediaingestpage_positve", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_media_ingest_verification.Test_004_media_ingest_page object at 0x7fb970de5a90>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4633c786e89298e0ecbbe736c7bd8006\")>\n\n    @pytest.mark.sanity\n    @allure.description(\"This test case validates the search functionality\")\n    @allure.severity(severity_level=\"NORMAL\")\n    def test_mediaingestpage_positve(self, setup):\n        self.logger.info(\"Started Test_004_Add_Content_Partner Test\")\n        self.driver = setup\n        self.driver.implicitly_wait(15)\n        self.driver.get(self.baseURL)\n        self.lp = LoginPage(self.driver)\n        self.lp.setUserName(self.username)\n        self.lp.setPassWord(self.password)\n        self.lp.clickLogin()\n        # time.sleep(15)\n        self.cp = AddCustomer(self.driver)\n        self.cp.clickContentPartner()\n        # time.sleep(7)\n        current_URL = self.driver.current_url\n        exp_URL='http://3.82.204.32:31000/content-partner-management'\n        self.mi = MediaIngest(self.driver)\n        if current_URL == exp_URL:\n            self.mi.clickonpartner()\n            # time.sleep(7)\n            self.mi.clickonchannel()\n            # time.sleep(7)\n            current_media_ingest_url = self.driver.current_url\n            exp_media_ingest_url = \"https://cp-vod-presales.amagi.tv/media-ingest\"\n            if current_media_ingest_url == exp_media_ingest_url:\n                print(\"User Landed on Media Ingest Page\")\n                time.sleep(5)\n                t = self.mi.quickfilter()\n                n = int(t)\n                if n > 0:\n                    text = self.mi.firsttitle()\n                    print(text)\n                    self.mi.searchbar()\n                    time.sleep(4)\n                    text1 = self.mi.firsttitle()\n                    print(text1)\n                    time.sleep(3)\n                    if text == text1:\n                        print(\"Test passed\")\n                        assert True\n                    else:\n                        print(\"Test Fail\")\n                        assert False\n                    assert True\n                else:\n                    print(\"No titles found\")\n                    assert True\n            else:\n                print(\"url not matching\")\n>               assert False\nE               assert False\n\ntestCases/test_media_ingest_verification.py:75: AssertionError"}, "description": "This test case validates the search functionality", "attachments": [{"name": "log", "source": "279adf7d-df4d-49f4-b34f-bd4ccae52796-attachment.txt", "type": "text/plain"}], "start": 1651032189436, "stop": 1651032210782, "uuid": "1a0bce11-fcb4-4f7b-a62b-3c27ac869381", "historyId": "969f0bdf73c7c1daa87600a5804acbd5", "testCaseId": "d5bdbfbd5589b01d0a0793149bad5625", "fullName": "test_media_ingest_verification.Test_004_media_ingest_page#test_mediaingestpage_positve", "labels": [{"name": "severity", "value": "NORMAL"}, {"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_media_ingest_verification"}, {"name": "subSuite", "value": "Test_004_media_ingest_page"}, {"name": "host", "value": "AMGBLR2009-LT"}, {"name": "thread", "value": "34897-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_media_ingest_verification"}]}